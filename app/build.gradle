apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def projectName = "ffplayer"
android {
    compileSdkVersion project.compileSdkVersion
    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.androidTargetSdk
        versionCode project.versionCode
        versionName project.versionName

        vectorDrawables.useSupportLibrary = true
        androidExtensions {//z支持动态添加控件（tip:LayoutContainer）
            experimental = true
        }
        resConfigs 'zh-rCN'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        compileOptions {
            sourceCompatibility rootProject.ext.javaSourceCompatibility
            targetCompatibility rootProject.ext.javaTargetCompatibility
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    signingConfigs {
        debug {
            storeFile file('taike.jks')
            storePassword "dftk1689"
            keyAlias "taike"
            keyPassword "szyd2433"
        }

        release {
            storeFile file('taike.jks')
            storePassword "dftk1689"
            keyAlias "taike"
            keyPassword "szyd2433"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    buildFeatures {
        dataBinding = true
    }
    namespace 'com.pcyfox.ffplayer'

    applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = buildType.name + "_" +  projectName + "_" + defaultConfig.versionName + "_" + defaultConfig.versionCode + "_" + new Date().format("yyyy-MM-dd_HH-mm-ss") + ".apk"
            }

            //编译完成后将apk复制到指定目录
            variant.assemble.doLast {
                variant.outputs.all {
                    //复制到根目录下的output文件夹 如果不需要可以直接将代码删除
                    File desFilePath = new File("${rootDir}/apks/" + projectName + "-" + defaultConfig.versionName)
                    if (desFilePath.exists()) {
                        desFilePath.deleteDir()
                    }
                    File out = new File("${rootDir}/app/build/outputs")
                    // 将编译好的apk 复制到output目录，方便使用
                    copy {
                        from out
                        into desFilePath
                    }
                }
            }
    }
}

dependencies {
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    implementation project(path: ':module_recorder')
}